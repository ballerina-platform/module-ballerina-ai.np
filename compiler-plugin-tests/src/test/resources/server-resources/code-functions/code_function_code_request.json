{
  "usecase": "An `external` function with the `@code` Ballerina annotation needs to replaced at compile-time\nwith the code necessary to achieve the requirement specified as the `prompt` field in the\nannotation.\n\nAs a skilled Ballerina programmer, you have to generate the code to do this for the sortEmployees function.\nThe following prompt defines the requirement:\n\n```\nGive me a new array with the employees sorted by\n                        1. salary in descending order and then\n                        2. name in ascending order\n```\n\nYour task is to generate a function named 'sortEmployeesNPGenerated' with the code that needs to satisfy this user\nprompt.\n\nThe 'sortEmployeesNPGenerated' function should have exactly the same signature as the 'sortEmployees' function.\nUse only the parameters passed to the function and module-level clients that are clients from the ballerina and ballerinax module in the generated code.\n\nRespond with ONLY THE GENERATED FUNCTION AND ANY IMPORTS REQUIRED BY THE GENERATED FUNCTION.\n",
  "sourceFiles": [
    {
      "filePath": "main.bal",
      "content": "import ballerina/io;\n\ntype Employee record {|\n    string name;\n    decimal salary;\n|};\n\nfunction sortEmployees(Employee[] employees) returns Employee[] = @code {\n    prompt: string `Give me a new array with the employees sorted by\n                        1. salary in descending order and then\n                        2. name in ascending order`\n} external;\n\npublic function main() {\n    Employee[] employees = [\n        {name: \"Charlie\", salary: 50000},\n        {name: \"Bob\", salary: 60000},\n        {name: \"Alice\", salary: 50000},\n        {name: \"David\", salary: 70000}\n    ];\n\n    Employee[] sortEmployeesResult = sortEmployees(employees);\n    io:println(sortEmployeesResult);\n}\n"
    }
  ]
}
