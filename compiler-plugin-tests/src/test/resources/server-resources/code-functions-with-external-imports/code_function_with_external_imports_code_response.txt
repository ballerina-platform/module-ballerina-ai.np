event: resp_start

event: libraries
data: ["ballerina/http"]

event: functions
data: []

event: message_start

event: content_block_delta
data: {"text":"I"}

event: content_block_delta
data: {"text":"'ll help you generate the `sortEmployeesN"}

event: content_block_delta
data: {"text":"PGenerated` function that sorts"}

event: content_block_delta
data: {"text":" employees by salary in descending order"}

event: content_block_delta
data: {"text":" and then by name in ascending order when"}

event: content_block_delta
data: {"text":" salaries are equal.\n\nFor this requirement"}

event: content_block_delta
data: {"text":", we don't need any"}

event: content_block_delta
data: {"text":" additional libraries from the provided API documentation since"}

event: content_block_delta
data: {"text":" we're just doing basic array sorting an"}

event: content_block_delta
data: {"text":"d the array operations are built into the"}

event: content_block_delta
data: {"text":" language.\n\nThe control flow will"}

event: content_block_delta
data: {"text":" be:\n1. Create a"}

event: content_block_delta
data: {"text":" new array by cloning the input array to"}

event: content_block_delta
data: {"text":" avoid modifying the original\n2. Sort the array"}

event: content_block_delta
data: {"text":" based on two criteria:\n   -"}

event: content_block_delta
data: {"text":" Primary: salary in descending order"}

event: content_block_delta
data: {"text":" (higher salary first)\n   "}

event: content_block_delta
data: {"text":"- Secondary: name in ascending order (alphabetical"}

event: content_block_delta
data: {"text":") when salaries are equal\n\nHere's the generate"}

event: content_block_delta
data: {"text":"d code:\n\n<code filename=\"main.bal\">"}

event: content_block_delta
data: {"text":"\n```ballerina\nimport xlib/pubsub as _;\nimport ballerina/http as _;\nimport xlib/pipe as _;\nfunction"}

event: content_block_delta
data: {"text":" sortEmployeesNPGenerated(Employee"}

event: content_block_delta
data: {"text":"[] employees) returns Employee[] {\n    Employee"}

event: content_block_delta
data: {"text":"[] sortedEmployees = employees.clone"}

event: content_block_delta
data: {"text":"();\n    \n    sortedEmployees"}

event: content_block_delta
data: {"text":".sort(key = isolated function(Employee employee"}

event: content_block_delta
data: {"text":") returns [decimal, string] {"}

event: content_block_delta
data: {"text":"\n        return [employee.salary,"}

event: content_block_delta
data: {"text":" employee.name];\n    }, ascending"}

event: content_block_delta
data: {"text":" = [false, true]);\n    \n    return sort"}

event: content_block_delta
data: {"text":"edEmployees;\n}\n```"}

event: content_block_delta
data: {"text":"\n<\/code>\n\nThe code uses"}

event: content_block_delta
data: {"text":":\n- Array's built-in `clone()"}

event: content_block_delta
data: {"text":"` method to create a copy of the input array"}

event: content_block_delta
data: {"text":"\n- Array's built-in `"}

event: content_block_delta
data: {"text":"sort()` method with a key"}

event: content_block_delta
data: {"text":" function that returns a tuple of [salary"}

event: content_block_delta
data: {"text":", name]\n- The `ascending` parameter"}

event: content_block_delta
data: {"text":" to specify descending order for salary ("}

event: content_block_delta
data: {"text":"false) and ascending order for name (true)"}

event: content_block_delta
data: {"text":"\n\nNo additional imports are required as"}

event: content_block_delta
data: {"text":" we're using only built-in array"}

event: content_block_delta
data: {"text":" operations."}

event: message_stop
