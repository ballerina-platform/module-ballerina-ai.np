{
  "usecase": "Generate a value expression to satisfy the following requirement using only Ballerina literals and\nconstructor expressions. The expression should be self-contained and should not have references.\n\nBallerina literals:\n1. nil-literal :=  () | null\n2. boolean-literal := true | false\n3. numeric-literal - int, float, and decimal values (e.g., 1, 2.0, 3f, 4.5d)\n4. string-literal - double quoted strings (e.g., \"foo\") or\n    string-template literal without interpolations (e.g., string `foo`)\n\nBallerina constructor expressions:\n1. List constructor expression - e.g., [1, 2]\n2. Mapping constructor expression - e.g., {a: 1, b: 2, \"c\": 3}\n3. Table constructor expression - e.g., table [{a: 1, b: 2}, {a: 2, b: 4}]\n\nThe value should belong to the type 'int[]|error'. This value will be used in the code in place of the\n`const natural {...}` expression with the requirement.\n\nRespond with ONLY THE VALUE EXPRESSION within ```ballerina and ```.\n\nRequirement:\n    Give me an array of length 10, with integers between 1000 and 2000.\n",
  "sourceFiles": [
    {
      "filePath": "get_array.bal",
      "content": "function getIntegers() returns int[]|error => const natural {\n    Give me an array of length 10, with integers between 1000 and ${END}.\n};\n"
    },
    {
      "filePath": "main.bal",
      "content": "import ballerina/io;\n\nconst int END = 2000;\n\npublic function main() {\n    io:println(getIntegers());\n}\n"
    }
  ]
}
